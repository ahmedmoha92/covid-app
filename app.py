import streamlit as st
import pandas as pd
import geopandas as gpd
import folium
from streamlit_folium import st_folium
import joblib
from datetime import datetime
import plotly.express as px

# === Configuration de la page ===
st.set_page_config(
    page_title="Dashboard √âpid√©mique COVID",
    layout="wide",
    page_icon="ü¶†"
)

# === Fonctions de chargement avec cache ===
@st.cache_data
def load_models():
    """Charge tous les mod√®les et le scaler"""
    return {
        "Random Forest": joblib.load("random_forest_model.pkl"),
        "XGBoost": joblib.load("xgboost_model.pkl"),
        "Linear Regression": joblib.load("linear_regression_model.pkl"),
        "Neural Network": joblib.load("mlp_model.pkl"),
        "SVM": joblib.load("svm_model.pkl")
    }, joblib.load("scaler.pkl")

@st.cache_data
def load_data():
    """Charge les donn√©es principales"""
    df = pd.read_csv("dataset.csv", encoding="ISO-8859-1")
    gdf = gpd.read_file("regions.geojson")
    return df, gdf

# === Chargement initial ===
with st.spinner("Chargement des donn√©es et mod√®les..."):
    models, scaler = load_models()
    df, gdf = load_data()

# === Constantes ===
CODE_TO_REGION = {
    11: "√éle-de-France", 24: "Centre-Val de Loire", 27: "Bourgogne-Franche-Comt√©",
    28: "Normandie", 32: "Hauts-de-France", 44: "Grand Est", 52: "Pays de la Loire",
    53: "Bretagne", 75: "Nouvelle-Aquitaine", 76: "Occitanie",
    84: "Auvergne-Rh√¥ne-Alpes", 93: "Provence-Alpes-C√¥te d'Azur", 94: "Corse"
}

FEATURES = [
    'retail_and_recreation', 'grocery_and_pharmacy', 'parks',
    'transit_stations', 'workplaces', 'residential',
    'TMin (¬∞C)', 'TMax (¬∞C)', 'TMoy (¬∞C)',
    'pm25', 'pm10', 'o3', 'no2', 'Vaccination'
]
TARGET = 'Cas epidemiques'

# === Nettoyage et Pr√©paration des donn√©es ===
def clean_data(df):
    """Nettoie et pr√©pare le dataframe sans supprimer les lignes incompl√®tes"""
    df = df.copy()
    df.columns = df.columns.str.strip()

    # Conversion des dates
    df['date'] = pd.to_datetime(df['date'], errors='coerce', dayfirst=True)

    # Conversion des valeurs num√©riques avec conservation des NaN
    for col in FEATURES + [TARGET]:
        if col in df.columns:
            df[col] = df[col].astype(str).str.replace(',', '.')
            df[col] = pd.to_numeric(df[col], errors='coerce')

    return df

with st.spinner("Pr√©paration des donn√©es..."):
    df = clean_data(df)
    df['Region_Name'] = df['Code Insee Region'].map(CODE_TO_REGION)
    df.dropna(subset=['date', 'Region_Name'], inplace=True) # Assurer qu'il n'y a pas de NaN apr√®s le mapping

    # Pour l'analyse temporelle, on garde toutes les dates mais on filtre les ann√©es
    df = df[(df['date'].dt.year >= 2020) & (df['date'].dt.year <= 2022)]

# === Derni√®res donn√©es pour pr√©diction ===
latest = df.sort_values("date").groupby("Region_Name").tail(1)
X_latest = latest[FEATURES]
X_scaled = scaler.transform(X_latest)

# === Barre lat√©rale ===
st.sidebar.title("‚öôÔ∏è Param√®tres du mod√®le")
selected_model_name = st.sidebar.selectbox(
    "Choisissez un mod√®le de pr√©diction",
    list(models.keys())
)
# Instructions pour ex√©cuter l'application Streamlit
st.sidebar.markdown("""
---
**Pour ex√©cuter cette application :**
1.  Enregistrez ce code sous `app.py`.
2.  Assurez-vous d'avoir `random_forest_model.pkl`, `xgboost_model.pkl`,
    `linear_regression_model.pkl`,
    `mlp_model.pkl`,
    `svm_model.pkl`, `scaler.pkl`, `regions.geojson` et `Dataset2.csv`
    dans le m√™me r√©pertoire.
3.  Ouvrez votre terminal et naviguez vers ce r√©pertoire.
4.  Ex√©cutez la commande : `streamlit run app.py`
""")
model = models[selected_model_name]

# Pr√©diction
try:
    latest["prediction"] = model.predict(X_scaled)
    # Rendre les pr√©dictions n√©gatives nulles (non-sens physique)
    latest["prediction"] = latest["prediction"].apply(lambda x: max(0, x))
except Exception as e:
    st.error(f"Erreur lors de la pr√©diction : {str(e)}")
    st.stop()

# === Interface principale ===
st.title("ü¶† Tableau de Bord √âpid√©mique COVID-19 - France")

tabs = st.tabs([
    "üìò Contexte",
    "üó∫Ô∏è Carte et Alertes",
    "üìà √âvolution temporelle",
    "üîç Simulation personnalis√©e"
])

# === Onglet 1 : Contexte ===
with tabs[0]:
    st.header("üìò Contexte et Objectif")
    st.markdown("""
    Ce tableau de bord vise √† anticiper les pics √©pid√©miques de COVID-19 √† l'√©chelle r√©gionale.
    Il s'appuie sur des mod√®les de machine learning entra√Æn√©s √† partir de donn√©es :
    - de mobilit√© (Google),
    - de pollution (WAQI),
    - m√©t√©o (M√©t√©o France),
    - de couverture vaccinale (data.gouv.fr).

    **Objectif** : Fournir un outil d'aide √† la d√©cision pour les Agences R√©gionales de Sant√© (ARS) afin de cibler rapidement les zones √† risque et d'allouer les ressources de mani√®re proactive.
    """)

    st.subheader("üîß Mod√®les disponibles")
    st.write(f"Mod√®le actuellement s√©lectionn√© : **{selected_model_name}**")
    st.json({model_name: type(model_obj).__name__ for model_name, model_obj in models.items()})

    st.subheader("üìä Aper√ßu des donn√©es utilis√©es")
    st.dataframe(df.head(), hide_index=True)

# === Onglet 2 : Carte interactive ===
with tabs[1]:
    st.header("üó∫Ô∏è Carte des pr√©dictions √©pid√©miques par r√©gion")

    col1, col2 = st.columns([1, 3])
    with col1:
        seuil_alerte = st.slider(
            "Seuil d'alerte √©pid√©mique",
            0, 10000, 3000, 100,
            help="D√©finissez le nombre de cas hebdomadaires pr√©dits √† partir duquel une alerte est d√©clench√©e."
        )

        # Ajout des m√©tadonn√©es
        latest["Statut"] = latest["prediction"].apply(
            lambda x: ("üî¥ Alerte" if x > seuil_alerte else
                      "üü° Mod√©r√©" if x > seuil_alerte * 0.7 else
                      "üü¢ Stable")
        )

        # R√©sum√© des alertes
        st.metric(
            "R√©gions en alerte",
            f"{sum(latest['prediction'] > seuil_alerte)} / {len(latest)}"
        )

    with col2:
        # Carte Folium
        m = folium.Map(location=[46.5, 2.5], zoom_start=5.5, tiles="cartodb positron")

        # Fusionner les pr√©dictions avec les donn√©es g√©o
        map_data = gdf.merge(latest, left_on='nom', right_on='Region_Name')

        for _, row in map_data.iterrows():
            pred = row["prediction"]
            region_nom = row["Region_Name"]
            statut = row["Statut"]
            
            color = "red" if statut == "üî¥ Alerte" else "orange" if statut == "üü° Mod√©r√©" else "green"
            
            centroid = row.geometry.centroid
            folium.CircleMarker(
                location=[centroid.y, centroid.x],
                radius=8 + (pred / 400),  # Taille proportionnelle aux cas
                color=color,
                fill=True,
                fill_color=color,
                fill_opacity=0.6,
                popup=folium.Popup(f"""
                    <b>{region_nom}</b><br>
                    Cas pr√©dits : {int(pred):,}<br>
                    Statut : {statut}<br>
                    Date des donn√©es : {row['date'].strftime('%d/%m/%Y')}
                """, max_width=250)
            ).add_to(m)

        st_folium(m, width=800, height=500, returned_objects=[])

    # L√©gende et donn√©es
    st.markdown("""
    ### üß≠ L√©gende des statuts :
    - üü¢ **Stable** : pr√©dictions inf√©rieures √† 70% du seuil
    - üü° **Mod√©r√©** : pr√©dictions entre 70% et 100% du seuil
    - üî¥ **Alerte** : pr√©dictions d√©passant le seuil
    """)

    # Tableau r√©capitulatif
    st.subheader("üìã R√©sum√© par r√©gion")
    summary_df = latest[[
        "Region_Name", "prediction", "Statut", "date"
    ]].rename(columns={
        "Region_Name": "R√©gion",
        "prediction": "Cas Pr√©dits",
        "date": "Date des donn√©es"
    }).sort_values("Cas Pr√©dits", ascending=False)

    st.dataframe(
        summary_df.style.format({
            "Cas Pr√©dits": "{:,.0f}",
            "Date des donn√©es": lambda x: x.strftime("%d/%m/%Y")
        }),
        use_container_width=True,
        hide_index=True
    )

    # Export
    csv = summary_df.to_csv(index=False).encode("utf-8")
    st.download_button(
        "üì• T√©l√©charger les pr√©dictions (CSV)",
        csv,
        f"predictions_covid_{datetime.now().strftime('%Y%m%d')}.csv",
        "text/csv"
    )

# === Onglet 3 : √âvolution temporelle ===
with tabs[2]:
    st.header("üìà √âvolution temporelle des cas par r√©gion")

    # S√©lection des r√©gions
    selected_regions = st.multiselect(
        "S√©lectionner les r√©gions √† afficher",
        options=sorted(list(CODE_TO_REGION.values())),
        default=list(CODE_TO_REGION.values())[:5] # Par d√©faut, les 5 premi√®res r√©gions
    )

    if selected_regions:
        df_filtered = df[df['Region_Name'].isin(selected_regions)]

        st.subheader("√âvolution par r√©gion (cas observ√©s)")
        fig = px.line(
            df_filtered,
            x='date',
            y=TARGET,
            color='Region_Name',
            title="√âvolution des cas √©pid√©miques observ√©s par r√©gion",
            labels={'date': 'Date', TARGET: 'Nombre de cas hebdomadaires'}
        )
        fig.update_layout(height=500, legend_title_text='R√©gion')
        st.plotly_chart(fig, use_container_width=True)

        st.subheader("Vue agr√©g√©e - Contribution de chaque r√©gion")
        fig2 = px.area(
            df_filtered,
            x='date',
            y=TARGET,
            color='Region_Name',
            title="Contribution de chaque r√©gion aux cas totaux (parmi la s√©lection)"
        )
        fig2.update_layout(height=500, legend_title_text='R√©gion')
        # *** CORRECTION : Affichage du graphique fig2 qui √©tait manquant ***
        st.plotly_chart(fig2, use_container_width=True)
    else:
        # *** AM√âLIORATION : Message si aucune r√©gion n'est s√©lectionn√©e ***
        st.info("Veuillez s√©lectionner au moins une r√©gion pour afficher les graphiques.")


# === Onglet 4 : Simulation personnalis√©e ===
with tabs[3]:
    st.header("üîç Simulation personnalis√©e")
    st.write("Modifiez les param√®tres ci-dessous pour simuler l'impact sur le nombre de cas √©pid√©miques, selon le mod√®le s√©lectionn√©.")

    col_guide, col_simul = st.columns([1, 2])

    with col_guide:
        st.subheader("üìö Guide des variables")
        with st.expander("üö∂ Mobilit√© Humaine", expanded=True):
            st.markdown("""
            **Variation (%) par rapport √† une p√©riode de r√©f√©rence pr√©-pand√©mique.**
            - **üõçÔ∏è Commerces/loisirs**: Restaurants, cin√©mas, etc.
            - **ü•¶ √âpiceries/pharmacies**: Magasins essentiels.
            - **üå≥ Parcs**: Espaces verts publics.
            - **üöÜ Transports**: Gares, m√©tros, bus.
            - **üè¢ Lieux de travail**: Bureaux.
            - **üè† R√©sidences**: Temps pass√© au domicile.
            """)
        with st.expander("üåç Environnement"):
            st.markdown("""
            **Conditions m√©t√©orologiques et de pollution moyennes.**
            - **Temp√©ratures**: Min, Max, Moyenne (¬∞C).
            - **Polluants**: PM2.5, PM10, NO2, O3 (¬µg/m¬≥).
            """)
        with st.expander("üíâ Sant√© Publique"):
            st.markdown("""
            **Couverture vaccinale**
            - Nombre total de doses administr√©es dans la r√©gion.
            """)

    with col_simul:
        st.subheader("üìä Param√®tres de simulation")

        with st.form("simulation_form"):
            st.markdown("#### üö∂ Mobilit√©")
            mob_cols = st.columns(2)
            retail = mob_cols[0].number_input("Commerces/loisirs (%)", -100, 100, 0)
            grocery = mob_cols[1].number_input("√âpiceries/pharmacies (%)", -100, 100, 0)
            parks = mob_cols[0].number_input("Parcs (%)", -100, 100, 0)
            transit = mob_cols[1].number_input("Transports (%)", -100, 100, -10)
            workplaces = mob_cols[0].number_input("Lieux de travail (%)", -100, 100, -15)
            residential = mob_cols[1].number_input("R√©sidences (%)", -100, 100, 5)

            st.markdown("#### üåç Environnement")
            env_cols = st.columns(2)
            tmin = env_cols[0].number_input("Temp. minimale (¬∞C)", -20.0, 40.0, 10.0, format="%.1f")
            tmax = env_cols[1].number_input("Temp. maximale (¬∞C)", -10.0, 50.0, 20.0, format="%.1f")
            tmoy = env_cols[0].number_input("Temp. moyenne (¬∞C)", -15.0, 45.0, 15.0, format="%.1f")
            pm25 = env_cols[1].number_input("PM2.5 (¬µg/m¬≥)", 0.0, 100.0, 15.0, format="%.1f")
            pm10 = env_cols[0].number_input("PM10 (¬µg/m¬≥)", 0.0, 150.0, 25.0, format="%.1f")
            no2 = env_cols[1].number_input("NO2 (¬µg/m¬≥)", 0.0, 200.0, 30.0, format="%.1f")
            o3 = env_cols[0].number_input("O3 (¬µg/m¬≥)", 0.0, 200.0, 50.0, format="%.1f")

            st.markdown("#### üíâ Vaccination")
            vaccination = st.number_input("Doses administr√©es (total)", 0, 80000000, 5000000)

            submitted = st.form_submit_button("Lancer la pr√©diction")

            if submitted:
                input_data = {
                    'retail_and_recreation': retail, 'grocery_and_pharmacy': grocery, 'parks': parks,
                    'transit_stations': transit, 'workplaces': workplaces, 'residential': residential,
                    'TMin (¬∞C)': tmin, 'TMax (¬∞C)': tmax, 'TMoy (¬∞C)': tmoy,
                    'pm25': pm25, 'pm10': pm10, 'o3': o3, 'no2': no2, 'Vaccination': vaccination
                }
                
                try:
                    input_df = pd.DataFrame([input_data], columns=FEATURES)
                    input_scaled = scaler.transform(input_df)
                    pred = model.predict(input_scaled)[0]
                    pred = max(0, pred) # Assurer une pr√©diction non-n√©gative

                    st.success("### üéØ R√©sultats de la simulation")
                    
                    res_cols = st.columns(2)
                    res_cols[0].metric("Cas hebdomadaires pr√©dits", f"{int(pred):,}")
                    
                    alert_status = "üî¥ Alerte" if pred > seuil_alerte else "üü° Mod√©r√©" if pred > seuil_alerte*0.7 else "üü¢ Stable"
                    res_cols[1].metric("Niveau d'alerte", alert_status)
                    
                    prog_value = min(pred / seuil_alerte if seuil_alerte > 0 else 1.0, 1.0)
                    st.progress(prog_value, text=f"{prog_value*100:.1f}% du seuil d'alerte ({int(seuil_alerte):,} cas)")
                    
                    if pred > seuil_alerte:
                        st.warning("#### Recommandations pour un niveau d'alerte √©lev√© :\n- Envisager le renforcement des mesures sanitaires (masques, distanciation).\n- Lancer des campagnes de communication pour limiter les rassemblements.\n- Acc√©l√©rer la vaccination de rappel.")
                    elif pred > seuil_alerte * 0.5:
                        st.info("#### Recommandations pour un niveau mod√©r√© :\n- Renforcer la surveillance √©pid√©miologique.\n- Promouvoir activement la vaccination et les gestes barri√®res.\n- Sensibiliser les populations sur les risques.")
                    else:
                        st.success("#### Situation sous contr√¥le :\n- Maintenir la surveillance et la communication pr√©ventive.\n- Continuer les efforts de vaccination.")

                except Exception as e:
                    st.error(f"Erreur lors de la pr√©diction de la simulation : {str(e)}")